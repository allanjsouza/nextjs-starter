name: Terminate PR environment
on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: [closed]

jobs:
  terminate-pr-env:
    runs-on: ubuntu-22.04
    permissions:
      deployments: write
      pull-requests: write
    if: >
      github.event_name == 'pull_request_target'||
      (
        github.event.issue.pull_request &&
        github.event.issue.state == 'open' &&
        github.event.comment.body == '/destroy'
      )
    env:
      PULL_REQUEST_REF: ${{github.event.issue.number || github.event.pull_request.number}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{vars.AWS_REGION}}
      - uses: actions/cache@v3
        id: cache-awsebcli
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-pip
      - name: Install EB CLI
        id: install-eb-cli
        run: pip install awsebcli
      - name: Initialize EB
        run: |
          eb init ${{vars.AWS_EB_APP_NAME}} \
          --platform "${{vars.AWS_EB_PLATFORM}}" \
          --region ${{vars.AWS_REGION}}
      - name: Get EB env name
        id: get-eb-env-name
        run: |
          env_name=$(aws elasticbeanstalk describe-environments \
            --application-name ${{vars.AWS_EB_APP_NAME}} \
            --environment-names ${{vars.AWS_EB_APP_NAME}}-pr-$PULL_REQUEST_REF \
            --query "Environments[0].EnvironmentName" \
            --output text)
          echo "aws_eb_env=$env_name" >> $GITHUB_OUTPUT
      - name: Get EB env status
        id: get-eb-env-status
        run: |
          env_status=$(aws elasticbeanstalk describe-environments \
            --application-name ${{vars.AWS_EB_APP_NAME}} \
            --environment-names ${{vars.AWS_EB_APP_NAME}}-pr-$PULL_REQUEST_REF \
            --query "Environments[0].Status" \
            --output text)
          echo "aws_eb_env_status=$env_status" >> $GITHUB_OUTPUT
      - name: Check if env should be terminated
        id: check-env
        run: |
          should_terminate=${{steps.get-eb-env-name.outputs.aws_eb_env != 'None' && steps.get-eb-env-status.outputs.aws_eb_env_status != 'Terminated'}}
          echo "should_terminate=$should_terminate" >> $GITHUB_OUTPUT
      - name: Terminate environment
        if: steps.check-env.outputs.should_terminate == 'true'
        run: eb terminate ${{steps.get-eb-env-name.outputs.aws_eb_env}} --force
      - name: Get pull request HEAD ref
        if: >
          github.event_name == 'issue_comment' &&
          steps.check-env.outputs.should_terminate == 'true'
        id: get-ref
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })
            console.log(response.data)
            return response.data.head.ref
      - name: Get deployment ID
        if: steps.check-env.outputs.should_terminate == 'true'
        id: get-deployment-id
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const response = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "${{github.event.pull_request.head.ref || steps.get-ref.outputs.result}}",
              per_page: 1
            })
            console.log(response.data)
            return response.data.length > 0 ? response.data[0].id : ""
      - name: Inactivate deployment status
        if: >
          steps.get-deployment-id.outputs.result != '' &&
          steps.check-env.outputs.should_terminate == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{steps.get-deployment-id.outputs.result}},
              state: 'inactive'
            })
            console.log(response)
      - name: Update pull request (failure)
        uses: actions/github-script@v7
        if: failure() && steps.check-env.outputs.should_terminate == 'true'
        continue-on-error: true
        with:
          script: |
            const comment = `### ðŸ”´ Environment termination failed.

            [View logs](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{env.PULL_REQUEST_REF}}",
              body: comment
            })
      - name: Update pull request (success)
        uses: actions/github-script@v7
        if: success() && steps.check-env.outputs.should_terminate == 'true'
        with:
          script: |
            const comment = `### ðŸª¦ Environment terminated successfully.

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{env.PULL_REQUEST_REF}}",
              body: comment
            })
